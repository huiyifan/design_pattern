
设计模式六大原则:

1. 单一原则; Single Responsibility Principle
一个类或者一个方法只负责一项职责, 尽量做到类的只有一个行为原因引起变化
a. 业务对象(BO bussiness object) b. 业务逻辑(BL business)拆分

2. 里氏替换原则; LSP liskov substitution principle
子类可以扩展父类的功能, 但不能改变原有父类的功能(本质就是c++的多态)
目的: 增强程序的健壮性. 在实际项目中, 每个子类对应不同的业务含义, 使父类作为参数,
传递不同的子类完成不同的业务逻辑.

任何基类可以出现的地方, 子类一定可以出现。LSP是继承复用的基石, 只有当派生类可以替换基类,
且软件单元的功能不受到影响时, 基类才能真正被复用, 而派生类也能够在基类的基础上增加新的行为。
里氏替换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是
抽象化的具体实现，所以里氏替换原则是对实现抽象化的具体步骤的规范

3. 依赖倒置原则; dependence inversion principle
面向接口编程. 针对接口编程, 依赖于抽象而不依赖于具体。

4. 接口隔离原则; interface segregation principle
建立单一接口; 使用多个隔离的接口，比使用单个接口要好。它还有另外一层意思:
降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发, 便于
升级和维护的软件设计思想。它强调依赖，降低耦合

5. 迪米特原则; law of demeter LOD
最少知道原则, 尽量降低类与类之间的耦合.
一个实体应当尽量少的与其他实体之间发生相互作用。使得系统功能模块相对独立。

6. 开闭原则。open closed principle
对拓展开放, 对修改关闭。在程序需要进行拓展的时候, 不能修改原有的代码，实现一个热插拔的效果.
简言之, 是为了使程序的拓展性好，易于维护和升级。想要达到这样的效果, 我们需要使用接口和抽象类。


