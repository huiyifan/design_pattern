
在显示生活中, 存在很多"部分-整体"的关系, 例如, 大学中的部分与学院、总公司中的部分与分公司
、学习用品中的书与书包、衣柜与衣服等


组合模式的定义与特点
组合(Composite Pattern)模式定义: 有时又叫做整体-部分(Part-Whole)模式,
它是一种将对像组合成树状的层次结构的模式, 用来表示 ”整体-部分“的关系, 使用户对
单个对象和组合对象具有一致的访问性,属于结构型模式。

组合模式的主要优点:
1. 组合模式使的客户端代码可以一致地处理单个对象和组合对象, 无须关心自己处理的是单个对象，
还是组合对象,这简化了客户端代码.
2. 更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码, 满足”开闭原则“;

缺点:
1. 设计较复杂, 客户端需要花更多时间理清类之间的层次关系;
2. 不容易限制容器中的构件;
3. 不容易用继承的方法来增加构件的新功能;

一 主要角色
1. 抽象构件(Component)角色: 它的主要作用是为树叶构件和树枝构件声明公共接口, 并实现它们的默认行为。
在透明式的组合模式中抽象构件还声明访问和管理子类的接口; 在安全式的组合模式中不声明访问和管理子类的接口,
管理工作由树枝构件完成。

2. 树叶构件(Leaf)角色: 是组合中的叶节点对象，它没有子节点，用于继承或实现抽象构件。
3. 树叶构件(Composite)角色/中间构件: 是组合中的分支节点对象, 它有子节点, 用于继承和实现抽象构件。
它的主要作用是存储和管理子部件, 通常包含 add(), remove(), getChild()等方法.

组合模式分为透明式的组合模式和安全式的组合模式

(1) 透明方式
该方式中, 由于抽象构件声明了所有子类中的全部方法, 所以客户端无须区别树叶对象和树枝对象，对客户端来说是透明的
但其缺点是: 树叶构件本身没有add(), remove() 以及 getChild()方法, 却要实现它们, 这样会带来一些安全问题。



(2) 安全模式
在该方式中, 将管理子构件的方法移到树枝构件中，抽象构件和树叶构件没有对子对象的管理方法，这样就避免了上一种方式的
安全性问题，但由于叶子和分支有不同的接口，客户端在调用是要知道树叶对象和数值对象的存在，所以失去了透明性。


